substitutions:
  devicename: airleaf-01
  #devicename: airleaf-01b
  #devicename: airleaf-02

esphome:
  name: $devicename
  platform: ESP8266
  board: d1_mini

logger:
  # No log output through UART
  baud_rate: 0

# Enable Home Assistant API
api:

ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: Fancoil
    password: !secret ap_password
    
captive_portal:
  
uart:
  tx_pin: 1
  rx_pin: 3
  baud_rate: 9600

modbus:

modbus_controller:
  - id: airleaf
    address: 0x1

sensor:
  - platform: modbus_controller
    name: $devicename Air Temperature
    id: air_temperature
    register_type: read
    address: 0
    # Prevent reading register at address 1 at the same time
    force_new_range: true
    unit_of_measurement: "째C"
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
      
  - platform: modbus_controller
    name: $devicename Water Temperature
    icon: "mdi:coolant-temperature"
    register_type: read
    address: 1
    unit_of_measurement: "째C"
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  # # This seems redundant with the temperature adjusted in register 231
  # - platform: modbus_controller
  #   name: $devicename Internal setpoint
  #   register_type: read
  #   address: 8
  #   force_new_range: true
  #   unit_of_measurement: "째C"
  #   value_type: U_WORD
  #   accuracy_decimals: 1
  #   filters:
  #     - multiply: 0.1
      
  - platform: modbus_controller
    name: $devicename Fan speed setpoint
    icon: "mdi:speedometer"
    register_type: read
    address: 15
    unit_of_measurement: "RPM"
    value_type: U_WORD
    
text_sensor:
  - platform: modbus_controller
    name: $devicename Status flags
    icon: "mdi:flag"
    entity_category: diagnostic
    register_type: read
    address: 104
    force_new_range: true
    raw_encode: HEXBYTES
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0: return std::string("No flags");
        case 1: return std::string("Cooling");
        case 2: return std::string("Heating");
        case 16: return std::string("Water T");
        case 64: return std::string("Bad water");
        case 256: return std::string("Away mode");
        case 512: return std::string("Alarm");
        case 1024: return std::string("Testing");
        case 2048: return std::string("Standby");
        case 8192: return std::string("H2 absent");
        default: return x;
      }
      return x;
    
  - platform: modbus_controller
    name: $devicename Alarm flags
    icon: "mdi:alert-circle-outline"
    entity_category: diagnostic
    register_type: read
    address: 105
    raw_encode: HEXBYTES
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0: return std::string("OK");
        case 1: return std::string("Comm");
        case 2: return std::string("Air probe");
        case 8: return std::string("Bad water");
        case 16: return std::string("Water probe");
        case 64: return std::string("HiZ");
        case 128: return std::string("Motor");
        case 256: return std::string("Grid");
        case 512: return std::string("Water T");
        case 1024: return std::string("Filter");
        default: return x;
      }
      return x;
    
  - platform: modbus_controller
    name: $devicename Relay status
    icon: "mdi:dip-switch"
    entity_category: diagnostic
    register_type: read
    address: 9
    #response_size: 1
    #offset: 1
    raw_encode: HEXBYTES
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0: return std::string("All off");
        case 1: return std::string("EV1");
        case 2: return std::string("EV2");
        case 3: return std::string("EV1|EV2");
        case 4: return std::string("Chiller");
        case 5: return std::string("Chiller|EV1");
        case 7: return std::string("Chiller|EV1|EV2");
        case 8: return std::string("Heater");
        case 9: return std::string("Heater|EV1");
        case 11: return std::string("Heater|EV1|EV2");
        default: return x;
      }
      return x;
      
number:
  - platform: modbus_controller
    name: $devicename Temperature
    mode: slider
    icon: "mdi:thermometer"
    unit_of_measurement: "째C"
    address: 231
    value_type: U_WORD
    min_value: 16.0
    max_value: 25.0
    step: 0.5
    # Read old value from register
    lambda: "return x * 0.1;"
    # Write new value to register
    write_lambda: "return x * 10;"
    
  - platform: modbus_controller
    name: $devicename Min heating water T
    mode: box
    icon: "mdi:thermometer-chevron-up"
    address: 218
    force_new_range: true
    value_type: U_WORD
    min_value: 22.0
    max_value: 35.0
    step: 0.5
    lambda: "return x * 0.1;"
    write_lambda: "return x * 10;"
    
  - platform: modbus_controller
    name: $devicename Max cooling water T
    mode: box
    icon: "mdi:thermometer-chevron-down"
    address: 219
    value_type: U_WORD
    min_value: 15.0
    max_value: 20.0
    step: 0.5
    lambda: "return x * 0.1;"
    write_lambda: "return x * 10;"
    
  - platform: modbus_controller
    name: $devicename Min fan speed
    mode: box
    icon: "mdi:speedometer"
    address: 211
    value_type: U_WORD
    min_value: 400
    max_value: 1700
    step: 10
    lambda: "return x;"
    write_lambda: "return x;"

  - platform: modbus_controller
    name: $devicename Max fan speed
    mode: box
    icon: "mdi:speedometer"
    address: 213
    value_type: U_WORD
    min_value: 400
    max_value: 1700
    step: 10
    lambda: "return x;"
    write_lambda: "return x;"
    
  - platform: modbus_controller
    name: $devicename Air probe offset
    mode: box
    icon: "mdi:compare-vertical"
    address: 242
    value_type: S_WORD
    min_value: -12
    max_value: 12
    step: 0.1
    lambda: "return x * 0.1;"
    write_lambda: "return x * 10;"
    
select:
  - platform: modbus_controller
    name: $devicename Fan mode
    id: fan_mode
    icon: "mdi:fan"
    address: 201
    value_type: U_WORD
    optionsmap:
      "Auto": 0
      "Silent": 1
      "Night": 2
      "Max": 3
      "Standby": 128
    # Sync current option with register
    lambda: "return {};"
    # Write (numeric) value to register
    write_lambda: "return value;"
    
  - platform: modbus_controller
    name: $devicename Season
    id: season
    icon: "mdi:sun-snowflake"
    address: 233
    value_type: U_WORD
    optionsmap:
      #"Auto": 0
      "Winter": 3
      "Summer": 5
    lambda: "return {};"
    write_lambda: "return value;"
    
switch:
  - platform: template
    name: $devicename Standby
    icon: "mdi:power-standby"
    lambda: |-
      std::string val = id(fan_mode).state;
      return val == "Standby";
    turn_on_action:
      - select.set:
          id: fan_mode
          option: "Standby"
    turn_off_action:
      - select.set:
          id: fan_mode
          option: "Auto"

  - platform: template
    name: $devicename Night mode
    icon: "mdi:weather-night"
    lambda: |-
      std::string val = id(fan_mode).state;
      return val == "Night";
    turn_on_action:
      - select.set:
          id: fan_mode
          option: "Night"
    turn_off_action:
      - select.set:
          id: fan_mode
          option: "Auto"

  - platform: restart
    name: $devicename Restart
